{"version":3,"file":"static/js/984.75e2f7fa.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.styled.jsx","components/ContactListItem/ContactListItem.styled.jsx","redux/contactsSelectors.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ModalForm/ModalForm.styled.jsx","components/ModalForm/ModalForm.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContactsList = styled.ul`\n  margin: 0 auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  column-gap: 40px;\n  row-gap: 15px;\n  list-style: none;\n  padding: 0;\n`;","import styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n  height: 60px;\n  width: 350px;\n  display: flex;\n\n  padding: 5px 0;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 20px;\n  border-bottom: 1px solid #000000;\n`;\n\nexport const Checkbox = styled.input`\n  position: absolute;\n  top: -1;\n  visibility: hidden;\n  pointer-events: none;\n\n  &:checked + label {\n    color: #ffffff;\n  }\n`;\n\nexport const CheckboxLabel = styled.label`\n  cursor: pointer;\n  transition: color 250ms linear;\n  &:hover,\n  &:focus {\n    color: #ffffff66;\n  }\n`;\n\nexport const ContactName = styled.p`\n  font-size: 18px;\n  margin-bottom: 5px;\n`;\n\nexport const ContactNumber = styled.a`\n  svg {\n    margin-right: 5px;\n  }\n`;\n\nexport const DeleteButton = styled.button`\n  display: block;\n  width: 50px;\n  height: 50px;\n  border-radius: 4px;\n  border: 2px solid #ffffff;\n  text-transform: uppercase;\n  text-align: center;\n  background-color: transparent;\n  transition: background-color 250ms linear, color 250ms linear;\n  &:hover,\n  &:focus,\n  &:disabled {\n    cursor: pointer;\n    background-color: #00000044;\n    color: #fff;\n  }\n`;","export const getContacts = state => state.contacts.contacts;\nexport const getContactsStatus = state => state.contacts.status;\nexport const getContactsOperation = state => state.contacts.operation;\nexport const getContactsError = state => state.contacts.error;","import {\n    ListItem,\n    DeleteButton,\n    ContactName,\n    ContactNumber,\n  } from './ContactListItem.styled';\n  import PropTypes from 'prop-types';\n  import { deleteContact } from 'redux/contactsOperations';\n  import { useDispatch, useSelector } from 'react-redux';\n  import { FaUserGraduate, FaUserTimes } from 'react-icons/fa';\n  \n  import { LuPhoneCall } from 'react-icons/lu';\n  import { LoadingIcon } from 'components/SharedLayout/SharedLayout.styled';\n  import {\n    getContactsError,\n    getContactsOperation,\n  } from 'redux/contactsSelectors';\n  import { STATUS } from 'redux/constants';\n  import { notification } from 'components/SharedLayout/notification';\n  const { FULFILLED } = STATUS;\n  \n  export const ContactListItem = ({ contact }) => {\n    const contactsOperation = useSelector(getContactsOperation);\n    const contactsError = useSelector(getContactsError);\n    const dispatch = useDispatch();\n  \n    const { id, name, number } = contact;\n  \n    const handleDeleteContact = id => {\n      dispatch(deleteContact({ id })).then(response => {\n        if (response.meta.requestStatus === FULFILLED && !contactsError) {\n          notification(\n            `Contact '${name}' has been successfully deleted.`,\n            'success'\n          );\n          return;\n        }\n  \n        notification(\n          'We are failed with deleting your contact. Please, try again...'\n        );\n      });\n    };\n  \n    return (\n      <ListItem>\n        <FaUserGraduate size=\"40px\" />\n  \n        <div>\n          <ContactName>{name}</ContactName>\n          <ContactNumber href={`tel:${number}}`}>\n            <LuPhoneCall size=\"20px\" />\n            {number}\n          </ContactNumber>\n        </div>\n        <DeleteButton\n          type=\"button\"\n          disabled={contactsOperation === id}\n          onClick={() => {\n            handleDeleteContact(id);\n          }}\n        >\n          {contactsOperation === id ? (\n            <LoadingIcon size=\"32px\" />\n          ) : (\n            <FaUserTimes size=\"20px\" />\n          )}\n        </DeleteButton>\n      </ListItem>\n    );\n  };\n  \n  ContactListItem.propTypes = {\n    contact: PropTypes.object.isRequired,\n  };","import { useEffect } from 'react';\nimport { ContactsList } from './ContactList.styled';\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchAll } from 'redux/contactsOperations';\nimport { getContacts, getContactsOperation } from 'redux/contactsSelectors';\nimport { getIsLoggedIn } from 'redux/authSelectors';\nimport { LoadingIcon } from 'components/SharedLayout/SharedLayout.styled';\nimport { notification } from 'components/SharedLayout/notification';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const contactsOperation = useSelector(getContactsOperation);\n  const isLoggedIn = useSelector(getIsLoggedIn);\n  const filterValue = useSelector(({ filter }) => filter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    isLoggedIn &&\n      dispatch(fetchAll()).catch(() => {\n        notification(\n          'We are failed with loading your contacts. Please, try again..'\n        );\n      });\n  }, [dispatch, isLoggedIn]);\n\n  const filteredContacts = (() => {\n    const normalizedFilter = filterValue.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  })();\n\n  return contactsOperation === 'fetchAll' ? (\n    <LoadingIcon size=\"150px\" />\n  ) : (\n    <ContactsList>\n      {contacts.length > 0 ? (\n        filteredContacts.map(contact => (\n          <ContactListItem key={contact.id} contact={contact} />\n        ))\n      ) : (\n        <span>There are no contacts in your phonebook, yet.</span>\n      )}\n    </ContactsList>\n  );\n};","import styled from '@emotion/styled';\n\nexport const FilterWrapper = styled.div`\n  max-width: 350px;\n  margin: 0 auto;\n`;\n\nexport const InputWrapper = styled.div`\n  display: flex;\n  gap: 10px;\n  width: 350px;\n  margin-bottom: 25px;\n`;\n\nexport const FilterInput = styled.input`\n  padding: 10px;\n  margin: 0;\n  width: 100%;\n  font-size: 24px;\n  color: #ffffff;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  background-color: #00000044;\n  outline: 3px solid transparent;\n\n  transition: outline 250ms linear;\n\n  &:focus {\n    outline: 3px solid #000000;\n  }\n`;\n\nexport const FilterLabel = styled.label`\n  padding: 0;\n  margin: 0;\n  width: 100%;\n  font-size: 18px;\n  text-transform: uppercase;\n`;\n\nexport const AddContactButton = styled.button`\n  display: block;\n  flex-shrink: 0;\n  width: 50px;\n  height: 50px;\n\n  padding: 10px;\n  border-radius: 4px;\n  border: 2px solid #ffffff;\n  text-transform: uppercase;\n  text-align: center;\n  font-weight: 600;\n  background-color: transparent;\n  transition: background-color 250ms linear, color 250ms linear;\n\n  &:hover,\n  &:focus,\n  &:disabled {\n    cursor: pointer;\n    background-color: #00000044;\n    color: #fff;\n  }\n`;","import { nanoid } from 'nanoid';\nimport {\n  InputWrapper,\n  FilterInput,\n  FilterLabel,\n  AddContactButton,\n  FilterWrapper,\n} from './Filter.styled';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filter } from 'redux/filterSlice';\nimport { FaUserPlus } from 'react-icons/fa';\n\nexport const Filter = ({ toggleModal }) => {\n  const filterId = nanoid();\n  const filterValue = useSelector(({ filter }) => filter);\n  const dispatch = useDispatch();\n\n  return (\n    <FilterWrapper>\n      <FilterLabel htmlFor={filterId}>Filter contacts by name</FilterLabel>\n      <InputWrapper>\n        <FilterInput\n          autoComplete=\"off\"\n          type=\"text\"\n          id={filterId}\n          name=\"filter\"\n          value={filterValue}\n          onChange={e => {\n            dispatch(filter(e.currentTarget.value));\n          }}\n        />\n        <AddContactButton onClick={toggleModal} data-open-modal>\n          <FaUserPlus size=\"20px\" />\n        </AddContactButton>\n      </InputWrapper>\n    </FilterWrapper>\n  );\n};\n\nFilter.propTypes = {\n  toggleModal: PropTypes.func.isRequired,\n};","import styled from '@emotion/styled';\n\nexport const Backdrop = styled.div`\n  position: absolute;\n  z-index: 2;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: #00000066;\n  backdrop-filter: blur(4px);\n  overflow-y: scroll;\n`;\n\nexport const FormWrapper = styled.div`\n  position: absolute;\n  z-index: 3;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: #ffffffcc;\n  box-shadow: #ffffff 0px 0px 20px;\n\n  width: 300px;\n  border-radius: 15px;\n  padding: 15px;\n`;\n\nexport const CloseButton = styled.button`\n  display: block;\n  margin-left: auto;\n  margin-bottom: 10px;\n  width: 25px;\n  height: 25px;\n  border-radius: 50%;\n  border: none;\n  padding: 0;\n  background-color: transparent;\n\n  transition: background-color 250ms linear, color 250ms linear;\n  &:hover,\n  &:focus,\n  &:disabled {\n    cursor: pointer;\n    background-color: #00000044;\n    color: #fff;\n  }\n`;\n\nexport const AppForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n`;\n\nexport const FormTitle = styled.h2`\n  font-size: 18px;\n  font-weight: 400;\n  text-align: center;\n`;\n\nexport const FormInput = styled.input`\n  padding: 10px;\n  margin: 0;\n  width: 100%;\n  font-size: 24px;\n  color: #ffffff;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  background-color: #00000044;\n  outline: 3px solid transparent;\n\n  transition: outline 250ms linear;\n\n  &:focus {\n    outline: 3px solid #000000;\n  }\n`;\n\nexport const FormInputLabel = styled.label`\n  padding: 0;\n  margin: 0;\n  text-transform: capitalize;\n  width: 100%;\n  font-size: 18px;\n`;\n\nexport const ErrMessage = styled.span`\n  max-width: 100%;\n  font-size: 14px;\n  color: red;\n`;\n\nexport const SubmitButton = styled.button`\n  width: 150px;\n  padding: 10px;\n  border-radius: 4px;\n  border: 2px solid #ffffff;\n  text-transform: uppercase;\n  text-align: center;\n  background-color: transparent;\n  transition: background-color 250ms linear, color 250ms linear;\n  &:hover,\n  &:focus,\n  &:disabled {\n    cursor: pointer;\n    background-color: #00000044;\n    color: #fff;\n  }\n`;","import {\n  AppForm,\n  FormInput,\n  FormInputLabel,\n  SubmitButton,\n  ErrMessage,\n  Backdrop,\n  FormTitle,\n  FormWrapper,\n  CloseButton,\n} from './ModalForm.styled';\nimport PropTypes from 'prop-types';\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\nimport { nanoid } from 'nanoid';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { createPortal } from 'react-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contactsOperations';\nimport { useEffect } from 'react';\nimport { LoadingIcon } from 'components/SharedLayout/SharedLayout.styled';\nimport {\n  getContacts,\n  getContactsError,\n  getContactsOperation,\n} from 'redux/contactsSelectors';\nimport { notification } from 'components/SharedLayout/notification';\nimport { STATUS } from 'redux/constants';\nconst { FULFILLED } = STATUS;\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const ModalForm = ({ toggleModal }) => {\n  const nameID = nanoid();\n  const numberID = nanoid();\n  const contacts = useSelector(getContacts);\n  const contactsOperation = useSelector(getContactsOperation);\n  const contactsError = useSelector(getContactsError);\n  const dispatch = useDispatch();\n\n  const validationSchema = yup.object().shape({\n    name: yup\n      .string()\n      .matches(\n        \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required(),\n    number: yup\n      .string()\n      .matches(\n        '^[+]?[(]?[0-9]{1,4}[)]?[-s.]?[0-9]{1,4}[-s.]?[0-9]{1,6}$',\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n      )\n      .required(),\n  });\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  const handleToggleModal = event => {\n    const isEventModalControlElement =\n      event.currentTarget.dataset?.openModal ||\n      event.target.dataset?.closeModal ||\n      event.target.dataset?.backdrop ||\n      event.code === 'Escape';\n\n    if (isEventModalControlElement) {\n      toggleModal();\n      return;\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleToggleModal);\n    return () => {\n      window.removeEventListener('keydown', handleToggleModal);\n    };\n  });\n\n  const handleFormSubmit = async ({ name, number }) => {\n    const normalizedName = name.toLowerCase();\n\n    const isNameAlreadyInContacts = contacts.find(\n      contact => contact.name.toLowerCase() === normalizedName\n    );\n\n    if (isNameAlreadyInContacts) {\n      notification(`\"${name}\" is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact({ name, number })).then(response => {\n      if (response.meta.requestStatus === FULFILLED && !contactsError) {\n        notification(\n          `Contact '${name}' has been successfully added.`,\n          'success'\n        );\n        reset({ name: '', number: '' });\n        toggleModal();\n        return;\n      }\n\n      notification(\n        'We are failed with adding your new contact. Please, try again...'\n      );\n    });\n  };\n\n  return createPortal(\n    <Backdrop data-backdrop onClick={handleToggleModal}>\n      <FormWrapper>\n        <CloseButton data-close-modal onClick={handleToggleModal}>\n          <AiOutlineCloseCircle size=\"25px\" data-close-modal />\n        </CloseButton>\n        <AppForm autoComplete=\"off\" onSubmit={handleSubmit(handleFormSubmit)}>\n          <FormTitle>Fill the form below, to add your new contact.</FormTitle>\n          <FormInputLabel htmlFor={nameID}>Name</FormInputLabel>\n          <FormInput type=\"text\" {...register('name')} id={nameID} />\n          {errors.name && <ErrMessage>{errors.name.message}</ErrMessage>}\n          <FormInputLabel htmlFor={numberID}>Number</FormInputLabel>\n          <FormInput type=\"text\" {...register('number')} id={numberID} />\n          {errors.number && <ErrMessage>{errors.number.message}</ErrMessage>}\n          <SubmitButton\n            type=\"submit\"\n            disabled={contactsOperation === 'addContact'}\n          >\n            {contactsOperation === 'addContact' ? (\n              <LoadingIcon size=\"32px\" />\n            ) : (\n              'add contact'\n            )}\n          </SubmitButton>\n        </AppForm>\n      </FormWrapper>\n    </Backdrop>,\n    modalRoot\n  );\n};\n\nModalForm.propTypes = {\n  toggleModal: PropTypes.func.isRequired,\n};","import styled from '@emotion/styled';\n\nexport const ContactsWrapper = styled.div`\n  max-width: 100%;\n  margin: 0 auto;\n`;","import { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { ModalForm } from 'components/ModalForm/ModalForm';\nimport { useState } from 'react';\nimport { ContactsWrapper } from './Contacts.styled';\n\nconst Contacts = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const toggleModal = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  return (\n    <ContactsWrapper>\n      <Filter toggleModal={toggleModal} />\n      <ContactList />\n      {isModalOpen && <ModalForm toggleModal={toggleModal} />}\n    </ContactsWrapper>\n  );\n};\nexport default Contacts;"],"names":["ContactsList","styled","ListItem","ContactName","ContactNumber","DeleteButton","getContacts","state","contacts","getContactsOperation","operation","getContactsError","error","FULFILLED","STATUS","ContactListItem","contact","contactsOperation","useSelector","contactsError","dispatch","useDispatch","id","name","number","size","href","type","disabled","onClick","deleteContact","then","response","meta","requestStatus","notification","handleDeleteContact","ContactList","isLoggedIn","getIsLoggedIn","filterValue","filter","useEffect","fetchAll","catch","filteredContacts","normalizedFilter","toLowerCase","includes","length","map","FilterWrapper","InputWrapper","FilterInput","FilterLabel","AddContactButton","Filter","toggleModal","filterId","nanoid","htmlFor","autoComplete","value","onChange","e","currentTarget","Backdrop","FormWrapper","CloseButton","AppForm","FormTitle","FormInput","FormInputLabel","ErrMessage","SubmitButton","modalRoot","document","querySelector","ModalForm","nameID","numberID","validationSchema","yup","shape","matches","required","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","handleToggleModal","event","dataset","openModal","target","closeModal","backdrop","code","window","addEventListener","removeEventListener","handleFormSubmit","normalizedName","find","addContact","createPortal","onSubmit","message","ContactsWrapper","useState","isModalOpen","setIsModalOpen"],"sourceRoot":""}