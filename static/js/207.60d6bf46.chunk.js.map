{"version":3,"file":"static/js/207.60d6bf46.chunk.js","mappings":"2RAEaA,EAAcC,EAAAA,EAAAA,IAAH,wKAUXC,EAAUD,EAAAA,EAAAA,KAAH,uIAQPE,EAAYF,EAAAA,EAAAA,GAAH,wFAMTG,EAAYH,EAAAA,EAAAA,MAAH,uUAkBTI,EAAiBJ,EAAAA,EAAAA,MAAH,wHAQdK,EAAaL,EAAAA,EAAAA,KAAH,+EAMVM,EAAeN,EAAAA,EAAAA,OAAH,sZ,0DCvCjBO,EAAuBC,EAAAA,EAAAA,QAAdC,EAAcD,EAAAA,EAAAA,UAElBE,EAAe,WAC1B,IAAMC,GAASC,EAAAA,EAAAA,MACTC,GAAUD,EAAAA,EAAAA,MACVE,GAAaF,EAAAA,EAAAA,MACbG,GAAaC,EAAAA,EAAAA,aAAYC,EAAAA,eACzBC,GAAWC,EAAAA,EAAAA,eAEXC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,KAAMF,EAAAA,KAEHG,QACC,yHACA,0IAEDC,WACHC,MAAOL,EAAAA,KAEJG,QACC,yCACA,kFAEDC,WACHE,SAAUN,EAAAA,KAEPI,SAAS,yBACTG,IAAI,EAAG,wDAGZ,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYX,KALtBY,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OAiBf,OACE,UAACpC,EAAD,YACE,SAACG,EAAD,4DACA,UAACD,EAAD,CAASoC,aAAa,MAAMC,SAAUL,GAfjB,SAAC,GAA+B,IAA7BV,EAA4B,EAA5BA,KAAMG,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACvCT,GAASqB,EAAAA,EAAAA,IAAc,CAAEhB,KAAAA,EAAMG,MAAAA,EAAOC,SAAAA,KAAaa,MAAK,SAAAC,GACtD,GAAIA,EAASC,KAAKC,gBAAkBlC,EAGlC,OAFAyB,EAAM,CAAEX,KAAM,GAAIG,MAAO,GAAIC,SAAU,UACvCiB,EAAAA,EAAAA,GAAa,iCAAkC,YAGjDA,EAAAA,EAAAA,GACE,sEAEH,GACF,IAIG,WACE,SAACxC,EAAD,CAAgByC,QAASlC,EAAzB,mBACA,SAACR,GAAD,gBAAW2C,KAAK,QAAWd,EAAS,SAApC,IAA6Ce,GAAIpC,KAChDwB,EAAOZ,OAAQ,SAAClB,EAAD,UAAa8B,EAAOZ,KAAKyB,WACzC,SAAC5C,EAAD,CAAgByC,QAAShC,EAAzB,oBACA,SAACV,GAAD,gBAAW2C,KAAK,SAAYd,EAAS,UAArC,IAA+Ce,GAAIlC,KAClDsB,EAAOT,QAAS,SAACrB,EAAD,UAAa8B,EAAOT,MAAMsB,WAC3C,SAAC5C,EAAD,CAAgByC,QAAS/B,EAAzB,uBACA,SAACX,GAAD,gBACE2C,KAAK,YACDd,EAAS,aAFf,IAGEe,GAAIjC,KAELqB,EAAOR,WAAY,SAACtB,EAAD,UAAa8B,EAAOR,SAASqB,WACjD,SAAC1C,EAAD,CAAcwC,KAAK,SAASG,SAAUlC,IAAeR,EAArD,SACGQ,IAAeR,GAAU,SAAC,KAAD,CAAa2C,KAAK,SAAY,iBAKjE,ECpFD,EAPiB,WACf,OACE,+BACE,SAACxC,EAAD,KAGL,C","sources":["components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const FormWrapper = styled.div`\n  margin: 0 auto;\n  background-color: pink;\n  box-shadow: #ffffff 0px 0px 20px;\n\n  width: 300px;\n  border-radius: 15px;\n  padding: 15px;\n`;\n\nexport const AppForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n`;\n\nexport const FormTitle = styled.h2`\n  font-size: 18px;\n  font-weight: 400;\n  text-align: center;\n`;\n\nexport const FormInput = styled.input`\n  padding: 10px;\n  margin: 0;\n  width: 100%;\n  font-size: 24px;\n  color: #ffffff;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  background-color: #00000044;\n  outline: 3px solid transparent;\n\n  transition: outline 250ms linear;\n\n  &:focus {\n    outline: 3px solid #000000;\n  }\n`;\n\nexport const FormInputLabel = styled.label`\n  padding: 0;\n  margin: 0;\n  text-transform: capitalize;\n  width: 100%;\n  font-size: 18px;\n`;\n\nexport const ErrMessage = styled.span`\n  max-width: 100%;\n  font-size: 14px;\n  color: red;\n`;\n\nexport const SubmitButton = styled.button`\n  width: 150px;\n  height: 40px;\n  border-radius: 4px;\n  border: 2px solid #ffffff;\n  text-transform: uppercase;\n  text-align: center;\n  background-color: transparent;\n  transition: background-color 250ms linear, color 250ms linear;\n  overflow: hidden;\n\n  &:hover,\n  &:focus,\n  &:disabled {\n    cursor: pointer;\n    background-color: #00000044;\n    color: #fff;\n  }\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { createNewUser } from 'redux/authOperations';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport {\n  AppForm,\n  ErrMessage,\n  FormInput,\n  FormInputLabel,\n  FormTitle,\n  FormWrapper,\n  SubmitButton,\n} from './RegisterForm.styled';\nimport { nanoid } from 'nanoid';\nimport { LoadingIcon } from 'components/SharedLayout/SharedLayout.styled';\nimport { getAuthStatus } from 'redux/authSelectors';\nimport { STATUS } from 'redux/constants';\nimport { notification } from 'components/SharedLayout/notification';\nconst { PENDING, FULFILLED } = STATUS;\n\nexport const RegisterForm = () => {\n  const nameID = nanoid();\n  const emailID = nanoid();\n  const passwordID = nanoid();\n  const authStatus = useSelector(getAuthStatus);\n  const dispatch = useDispatch();\n\n  const validationSchema = yup.object().shape({\n    name: yup\n      .string()\n      .matches(\n        \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required(),\n    email: yup\n      .string()\n      .matches(\n        '[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$',\n        'Email can contain letters, digits and may contain \"@\" and \".\" example@mail.com'\n      )\n      .required(),\n    password: yup\n      .string()\n      .required('No password provided.')\n      .min(8, 'Password is too short - should be 8 chars minimum.'),\n  });\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  const handleFormSubmit = ({ name, email, password }) => {\n    dispatch(createNewUser({ name, email, password })).then(response => {\n      if (response.meta.requestStatus === FULFILLED) {\n        reset({ name: '', email: '', password: '' });\n        notification(`Welcome to your 'Be inConnect'`, 'success');\n        return;\n      }\n      notification(\n        'Please, check the inputed info. Maybe, you already have an account?'\n      );\n    });\n  };\n  return (\n    <FormWrapper>\n      <FormTitle>Please register to get access to application</FormTitle>\n      <AppForm autoComplete=\"off\" onSubmit={handleSubmit(handleFormSubmit)}>\n        <FormInputLabel htmlFor={nameID}>name</FormInputLabel>\n        <FormInput type=\"name\" {...register('name')} id={nameID}></FormInput>\n        {errors.name && <ErrMessage>{errors.name.message}</ErrMessage>}\n        <FormInputLabel htmlFor={emailID}>Email</FormInputLabel>\n        <FormInput type=\"email\" {...register('email')} id={emailID}></FormInput>\n        {errors.email && <ErrMessage>{errors.email.message}</ErrMessage>}\n        <FormInputLabel htmlFor={passwordID}>Password</FormInputLabel>\n        <FormInput\n          type=\"password\"\n          {...register('password')}\n          id={passwordID}\n        ></FormInput>\n        {errors.password && <ErrMessage>{errors.password.message}</ErrMessage>}\n        <SubmitButton type=\"submit\" disabled={authStatus === PENDING}>\n          {authStatus === PENDING ? <LoadingIcon size=\"32px\" /> : 'sign up'}\n        </SubmitButton>\n      </AppForm>\n    </FormWrapper>\n  );\n};","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return (\n    <>\n      <RegisterForm />\n    </>\n  );\n};\nexport default Register;"],"names":["FormWrapper","styled","AppForm","FormTitle","FormInput","FormInputLabel","ErrMessage","SubmitButton","PENDING","STATUS","FULFILLED","RegisterForm","nameID","nanoid","emailID","passwordID","authStatus","useSelector","getAuthStatus","dispatch","useDispatch","validationSchema","yup","shape","name","matches","required","email","password","min","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","autoComplete","onSubmit","createNewUser","then","response","meta","requestStatus","notification","htmlFor","type","id","message","disabled","size"],"sourceRoot":""}