{"version":3,"file":"static/js/539.ff5b3edd.chunk.js","mappings":"yOAEaA,EAAcC,EAAAA,EAAAA,IAAH,2KAWXC,EAAUD,EAAAA,EAAAA,KAAH,uIAQPE,EAAYF,EAAAA,EAAAA,GAAH,wFAMTG,EAAYH,EAAAA,EAAAA,MAAH,uUAkBTI,EAAiBJ,EAAAA,EAAAA,MAAH,wHAQdK,EAAaL,EAAAA,EAAAA,KAAH,+EAMVM,EAAeN,EAAAA,EAAAA,OAAH,sZ,4GCxCfO,EAAuBC,EAAAA,EAAAA,QAAdC,EAAcD,EAAAA,EAAAA,UAElBE,EAAY,WACvB,IAAMC,GAAUC,EAAAA,EAAAA,MACVC,GAAaD,EAAAA,EAAAA,MACbE,GAAaC,EAAAA,EAAAA,aAAYC,EAAAA,eACzBC,GAAWC,EAAAA,EAAAA,eAEXC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,MAAOF,EAAAA,KAEJG,QACC,yCACA,kFAEDC,WACHC,SAAUL,EAAAA,KAEPI,SAAS,yBACTE,IAAI,EAAG,wDAGZ,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYV,KALtBW,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OAef,OACE,UAAClC,EAAD,YACE,SAACG,EAAD,6DACA,UAACD,EAAD,CAASkC,aAAa,MAAMC,SAAUL,GAbjB,SAAC,GAAyB,IAAvBT,EAAsB,EAAtBA,MAAOG,EAAe,EAAfA,SACjCR,GAASoB,EAAAA,EAAAA,IAAM,CAAEf,MAAAA,EAAOG,SAAAA,KAAaa,MAAK,SAAAC,GACxC,GAAIA,EAASC,KAAKC,gBAAkBhC,EAGlC,OAFAuB,EAAM,CAAEV,MAAO,GAAIG,SAAU,UAC7BiB,EAAAA,EAAAA,GAAa,iCAAkC,YAGjDA,EAAAA,EAAAA,GAAa,uDACd,GACF,IAIG,WACE,SAACtC,EAAD,CAAgBuC,QAAShC,EAAzB,oBACA,SAACR,GAAD,gBAAWyC,KAAK,SAAYd,EAAS,UAArC,IAA+Ce,GAAIlC,KAClDsB,EAAOX,QAAS,SAACjB,EAAD,UAAa4B,EAAOX,MAAMwB,WAC3C,SAAC1C,EAAD,CAAgBuC,QAAS9B,EAAzB,uBACA,SAACV,GAAD,gBACEyC,KAAK,YACDd,EAAS,aAFf,IAGEe,GAAIhC,KAELoB,EAAOR,WAAY,SAACpB,EAAD,UAAa4B,EAAOR,SAASqB,WACjD,SAACxC,EAAD,CAAcsC,KAAK,SAASG,SAAUjC,IAAeP,EAArD,SACGO,IAAeP,GAAU,SAAC,KAAD,CAAayC,KAAK,SAAY,iBAKjE,ECvEH,EAPc,WACZ,OACE,+BACE,SAACtC,EAAD,KAGL,C","sources":["components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/Login/Login.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const FormWrapper = styled.div`\n  margin: 0 auto;\n\n  background-color: green;\n  box-shadow: #ffffff 0px 0px 20px;\n\n  width: 300px;\n  border-radius: 15px;\n  padding: 15px;\n`;\n\nexport const AppForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n`;\n\nexport const FormTitle = styled.h2`\n  font-size: 18px;\n  font-weight: 400;\n  text-align: center;\n`;\n\nexport const FormInput = styled.input`\n  padding: 10px;\n  margin: 0;\n  width: 100%;\n  font-size: 24px;\n  color: #ffffff;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  background-color: #00000044;\n  outline: 3px solid transparent;\n\n  transition: outline 250ms linear;\n\n  &:focus {\n    outline: 3px solid #000000;\n  }\n`;\n\nexport const FormInputLabel = styled.label`\n  padding: 0;\n  margin: 0;\n  text-transform: capitalize;\n  width: 100%;\n  font-size: 18px;\n`;\n\nexport const ErrMessage = styled.span`\n  max-width: 100%;\n  font-size: 14px;\n  color: red;\n`;\n\nexport const SubmitButton = styled.button`\n  width: 150px;\n  height: 40px;\n  border-radius: 4px;\n  border: 2px solid #ffffff;\n  text-transform: uppercase;\n  text-align: center;\n  background-color: transparent;\n  transition: background-color 250ms linear, color 250ms linear;\n  overflow: hidden;\n\n  &:hover,\n  &:focus,\n  &:disabled {\n    cursor: pointer;\n    background-color: #00000044;\n    color: #fff;\n  }\n`;","import {\n    AppForm,\n    ErrMessage,\n    FormInput,\n    FormInputLabel,\n    FormTitle,\n    FormWrapper,\n    SubmitButton,\n  } from './LoginForm.styled';\n  import { useDispatch, useSelector } from 'react-redux';\n  import { logIn } from 'redux/authOperations';\n  import { yupResolver } from '@hookform/resolvers/yup';\n  import * as yup from 'yup';\n  import { useForm } from 'react-hook-form';\n  import { nanoid } from 'nanoid';\n  import { getAuthStatus } from 'redux/authSelectors';\n  import { LoadingIcon } from 'components/SharedLayout/SharedLayout.styled';\n  import { STATUS } from 'redux/constants';\n  import { notification } from 'components/SharedLayout/notification';\n  const { PENDING, FULFILLED } = STATUS;\n  \n  export const LoginForm = () => {\n    const emailID = nanoid();\n    const passwordID = nanoid();\n    const authStatus = useSelector(getAuthStatus);\n    const dispatch = useDispatch();\n  \n    const validationSchema = yup.object().shape({\n      email: yup\n        .string()\n        .matches(\n          '[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$',\n          'Email can contain letters, digits and may contain \"@\" and \".\" example@mail.com'\n        )\n        .required(),\n      password: yup\n        .string()\n        .required('No password provided.')\n        .min(8, 'Password is too short - should be 8 chars minimum.'),\n    });\n  \n    const {\n      register,\n      handleSubmit,\n      reset,\n      formState: { errors },\n    } = useForm({\n      resolver: yupResolver(validationSchema),\n    });\n  \n    const handleFormSubmit = ({ email, password }) => {\n      dispatch(logIn({ email, password })).then(response => {\n        if (response.meta.requestStatus === FULFILLED) {\n          reset({ email: '', password: '' });\n          notification(`Welcome to your 'Be inConnect'`, 'success');\n          return;\n        }\n        notification('Something went wrong. Please, check the inputed info');\n      });\n    };\n    return (\n      <FormWrapper>\n        <FormTitle>Registered? Please input your data to sign in</FormTitle>\n        <AppForm autoComplete=\"off\" onSubmit={handleSubmit(handleFormSubmit)}>\n          <FormInputLabel htmlFor={emailID}>Email</FormInputLabel>\n          <FormInput type=\"email\" {...register('email')} id={emailID}></FormInput>\n          {errors.email && <ErrMessage>{errors.email.message}</ErrMessage>}\n          <FormInputLabel htmlFor={passwordID}>Password</FormInputLabel>\n          <FormInput\n            type=\"password\"\n            {...register('password')}\n            id={passwordID}\n          ></FormInput>\n          {errors.password && <ErrMessage>{errors.password.message}</ErrMessage>}\n          <SubmitButton type=\"submit\" disabled={authStatus === PENDING}>\n            {authStatus === PENDING ? <LoadingIcon size=\"32px\" /> : 'sign in'}\n          </SubmitButton>\n        </AppForm>\n      </FormWrapper>\n    );\n  };","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nconst Login = () => {\n  return (\n    <>\n      <LoginForm />\n    </>\n  );\n};\nexport default Login;"],"names":["FormWrapper","styled","AppForm","FormTitle","FormInput","FormInputLabel","ErrMessage","SubmitButton","PENDING","STATUS","FULFILLED","LoginForm","emailID","nanoid","passwordID","authStatus","useSelector","getAuthStatus","dispatch","useDispatch","validationSchema","yup","shape","email","matches","required","password","min","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","autoComplete","onSubmit","logIn","then","response","meta","requestStatus","notification","htmlFor","type","id","message","disabled","size"],"sourceRoot":""}